Name : Supriya Raghupati Samant
Employee ID : 2000147790
Mavericks Mumbai Batch - 4
_______________________________________________________________________
create database ecom;
use ecom;

create table customers(
customer_id int auto_increment primary key,
first_name varchar(50),
last_name varchar(50),
email varchar(50) unique,
address varchar(255)
);

create table products(
product_id int auto_increment primary key,
name varchar(100),
description text,
price decimal(10,2),
stockQuantity int
);

create table orders(
order_id int auto_increment primary key,
customer_id int,
order_date date,
total_amount decimal(10,2),
foreign key (customer_id ) references customers(customer_id ) on delete cascade );

create table order_items(
order_item_id int auto_increment primary key,
order_id int,
product_id int,
quantity int,
item_amount decimal(10,2),
foreign key (order_id ) references orders(order_id ) on delete cascade,
foreign key (product_id ) references products(product_id ) on delete cascade);

create table cart(
cart_id int auto_increment primary key,
customer_id int,
product_id int,
quantity int,
foreign key (customer_id ) references customers(customer_id ) on delete cascade,
foreign key (product_id ) references products(product_id ) on delete cascade
);

insert into products (name, description,price,stockQuantity)values
('Laptop','High performance laptop',800.00,10),
('Smartphone','Latest Smartphone',600.00,15),
('Tablet','Portable tablet',300.00,20),
('Headphones','Noise-canceling',150.00,30),
('Tv','4K Smart TV',900.00,5),
('Coffee Maker', 'Automatic coffee maker',50.00,25),
('Refrigerator', 'Energy efficient',700.00,10),
('Microware Oven','Counter top microwave', 80.00,15),
('Vacuum cleaner', 'Bagless vacuum cleaner',120.00,10);


insert into customers (first_name,last_name,email,address)values
('John','Doe','johndoe@example.com','123 Main St, City'),
('Jane','Smith','janesmith@example.com','456 Elm st, Town'),
('Robert','Johnson','robert@example.com','789 Oak st, Village'),
('Sarah', 'Brown','sarah@example.com','101 pine st, suburb'),
('David','Lee','david@example.com','234 Cedar st, District'),
('David2','Lee2','david2@example.com','234 Cedar st, District'),
('David3','Lee3','david3@example.com','234 Cedar st, District'),
('David4','Lee4','david4@example.com','234 Cedar st, District'),
('David5','Lee5','david5@example.com','234 Cedar st, District'),
('David6','Lee6','david6@example.com','234 Cedar st, District');


insert into orders values
(1,1,'2023-01-05',1200.00),
(2,2,'2023-02-10',900.00),
(3,3,'2023-03-15',300.00),
(4,4,'2023-04-25',150.00),
(5,5,'2023-05-30',1800.00),
(6,6,'2023-06-05',400.00),
(7,7,'2023-07-10',700.00),
(8,8,'2023-08-15',160.00),
(9,9,'2023-09-20',140.00),
(10,10,'2023-10-25',1400.00);

insert into order_items values(1,1,1,2,1600.00),
(2,1,3,1,300.00),
(3,2,2,3,1800.00),
(4,3,5,2,1800.00),
(5,4,4,4,600.00),
(6,4,6,1,50.00),
(7,5,1,1,800.00),
(8,5,2,2,1200.00);


select * from orders;
select * from customers;
select * from products;
select * from order_items;

insert into cart (customer_id,product_id,quantity)values
(1,1,2),
(1,3,1),
(2,2,3),
(3,4,4),
(3,5,2),
(4,6,1),
(5,1,1),
(6,9,3),
(7,7,2);
________________________________________________________________________
1. Update refrigerator product price to 800.
update products set price = 800 where name = 'refrigerator';
set sql_safe_updates = 0;

2. Remove all cart items for a specific customer.
delete from cart 
where customer_id = 5;

3. Retrieve Products Priced Below $100.
select * from products where price < 100;

4. Find Products with Stock Quantity Greater Than 5.
select * from products where stockQuantity >5;

5. Retrieve Orders with Total Amount Between $500 and $1000.
select * from orders where total_amount between 500 and 1000;

6. Find Products which name end with letter ‘r’.
select * from products where name like '%r';

7. Retrieve Cart Items for Customer 5.
select * from cart where customer_id = 5;

8. Find Customers Who Placed Orders in 2023.
select distinct * from customers c join orders o on
c.customer_id = o.customer_id 
where year(o.order_date) = 2023;

9. Determine the Minimum Stock Quantity for Each Product Category.
select name, min(stockQuantity) as min_stock
from products group by name;

10. Calculate the Total Amount Spent by Each Customer.
select customer_id, sum(total_amount) as total_spent
from orders group by customer_id;

11. Find the Average Order Amount for Each Customer.
select customer_id, avg(total_amount) as avg_total_amount
from orders group by customer_id;

12. Count the Number of Orders Placed by Each Customer.
select customer_id, count(order_id) as order_count
from orders group by customer_id;

13. Find the Maximum Order Amount for Each Customer.
select customer_id, max(total_amount) as max_total_amount
from orders group by customer_id;

14. Get Customers Who Placed Orders Totaling Over $1000.
select c.customer_id, c.first_name, c.email,sum(o.total_amount) as total_spent
from customers c
join orders o on c.customer_id = o.customer_id
group by c.customer_id,c.first_name, c.email
having  total_spent > 1000;

15. Subquery to Find Products Not in the Cart.
select * from products
where product_id not in 
(select distinct product_id from cart);

16. Subquery to Find Customers Who Haven't Placed Orders.
select * from customers where
customer_id not in (select
distinct customer_id from orders);

17. Subquery to Calculate the Percentage of Total Revenue for a Product.
select p.product_id, p.name,
(select sum(item_Amount) from order_items where product_id = p.product_id)/
(select sum(total_amount) from orders)* 100 as revenue_percentage from products p;

18. Subquery to Find Products with Low Stock.
select * from products where
stockquantity < (select avg(stockquantity) from products);

19. Subquery to Find Customers Who Placed High-Value Orders
select * from customers where
customer_id in
(select distinct customer_id from orders where total_amount > 1000);
